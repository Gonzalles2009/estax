'use client';

import { Line } from 'react-chartjs-2';
import { useEffect, useState, useRef } from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler,
  ChartOptions,
  ChartDataset
} from 'chart.js';
import annotationPlugin from 'chartjs-plugin-annotation';
import dragDataPlugin from 'chartjs-plugin-dragdata';
import { TaxCalculationResult } from '@/types/tax';
import { calculateTaxRegime } from '@/lib/calculations/tax-calculations';
import { useCalculatorStore } from '@/store/calculator-store';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler,
  annotationPlugin,
  dragDataPlugin
);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤ —Ä–µ–∂–∏–º–æ–≤
const CHART_COLORS: Record<string, string> = {
  empleado: '#00ffff',           // –¶–∏–∞–Ω
  autonomo_regular: '#ff00ff',   // –ú–∞–∂–µ–Ω—Ç–∞  
  autonomo_tarifa_plana: '#ffff00', // –ñ–µ–ª—Ç—ã–π
  sl_micro: '#00ff00',           // –ó–µ–ª–µ–Ω—ã–π
  sl_regular: '#ff8000',         // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  startup_certificada: '#8000ff', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
  beckham: '#ff0080'             // –†–æ–∑–æ–≤—ã–π
};

const REGIME_NAMES: Record<string, string> = {
  empleado: 'Empleado',
  autonomo_regular: 'Aut√≥nomo Regular',
  autonomo_tarifa_plana: 'Aut√≥nomo Tarifa Plana',
  sl_micro: 'SL Micro',
  sl_regular: 'SL Regular',
  startup_certificada: 'Startup Certificada',
  beckham: 'R√©gimen Beckham'
};

// –ú–æ–±–∏–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
const REGIME_NAMES_MOBILE: Record<string, string> = {
  empleado: 'Empleado',
  autonomo_regular: 'Aut√≥nomo Reg.',
  autonomo_tarifa_plana: 'Aut√≥nomo TP',
  sl_micro: 'SL Micro',
  sl_regular: 'SL Regular',
  startup_certificada: 'Startup',
  beckham: 'Beckham'
};

interface ExtendedChartData {
  datasets: ChartDataset<'line'>[];
  _revenueRange: number[];
  _currentIncomeIndex: number;
}

interface MainChartProps {
  results: TaxCalculationResult[];
}

export function MainChart({}: MainChartProps) {
  const [isMobile, setIsMobile] = useState(false);
  const [chartKey, setChartKey] = useState(0); // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
  const [isClient, setIsClient] = useState(false); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const [isDragging, setIsDragging] = useState(false); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ drag —Å–æ—Å—Ç–æ—è–Ω–∏—è
  
  const { 
    selectedRegimes, 
    community, 
    maritalStatus, 
    children, 
    monthlyExpenses,
    annualRevenue,
    setAnnualRevenue
  } = useCalculatorStore();

  // Throttling –¥–ª—è drag —Å–æ–±—ã—Ç–∏–π (—É—Å–∏–ª–µ–Ω–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è browser throttling)
  const lastDragTime = useRef(0);
  const dragThrottleMs = 100; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 FPS –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è browser flood protection
  
  // –ë–∞—Ç—á–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è flooding
  const pendingUpdate = useRef<number | null>(null);
  const lastRevenueUpdate = useRef<number>(annualRevenue);

  // –•–µ–ª–ø–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const mobileLog = (message: string, type = 'log') => {
    if (typeof window !== 'undefined' && 'addMobileLog' in window) {
      const logger = (window as typeof window & { addMobileLog: (msg: string, type?: string) => void }).addMobileLog;
      logger(message, type);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏ –¥–µ—Ç–µ–∫—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    setIsClient(true); // –ú—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ!
    
    const checkIsMobile = () => {
      if (typeof window !== 'undefined') {
        setIsMobile(window.innerWidth < 768);
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥—ë—Ç drag
        if (!isDragging) {
          setChartKey(prev => prev + 1);
        }
      }
    };
    
    checkIsMobile();
    
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', checkIsMobile);
      return () => window.removeEventListener('resize', checkIsMobile);
    }
  }, [isDragging]);

  // Cleanup pending updates –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (pendingUpdate.current) {
        cancelAnimationFrame(pendingUpdate.current);
      }
    };
  }, []);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  useEffect(() => {
    mobileLog(`üìä Chart component mounted. Client: ${isClient}, Mobile: ${isMobile}`);
    mobileLog(`üéØ Selected regimes: ${selectedRegimes.join(', ')}`);
    mobileLog(`üí∞ Annual revenue: ‚Ç¨${annualRevenue}`);
  }, [isClient, isMobile, selectedRegimes, annualRevenue]);

  const generateChartData = (): ExtendedChartData => {
    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç 30k –¥–æ 300k —Å —à–∞–≥–æ–º 5k
      const revenueRange = Array.from({ length: 55 }, (_, i) => 30000 + (i * 5000)); // 30k, 35k, 40k... 300k

      const datasets = [];

      // 1. –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –≤–∞–ª–æ–≤–æ–π –≤—ã—Ä—É—á–∫–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è) - —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
      if (!isMobile) {
        datasets.push({
          label: '–í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥',
          data: revenueRange.map((revenue, index) => ({x: index, y: revenue / 12})), // –ú–µ—Å—è—á–Ω—ã–π –≤–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥
          borderColor: '#666666',
          backgroundColor: '#66666620',
          borderWidth: 2,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 4,
          pointBackgroundColor: '#666666',
          pointBorderColor: '#0a0a0f',
          pointBorderWidth: 1,
          pointHoverBackgroundColor: '#ffffff',
          pointHoverBorderColor: '#666666',
          pointHoverBorderWidth: 2,
          fill: false,
          borderDash: [5, 5], // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
          // –û—Ç–∫–ª—é—á–∞–µ–º tooltip –¥–ª—è –≤–∞–ª–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
          tooltip: {
            enabled: false
          }
        });
      }

      // 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—É—é —Ç–æ—á–∫—É –Ω–∞ —Ç–µ–∫—É—â–µ–º –¥–æ—Ö–æ–¥–µ
      const currentIncomeIndex = revenueRange.findIndex(revenue => revenue >= annualRevenue);
      const actualIndex = Math.max(0, Math.min(currentIncomeIndex, revenueRange.length - 1));

      datasets.push({
        label: '–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥',
        data: [{x: actualIndex, y: 0}], // –û–¥–Ω–∞ —Ç–æ—á–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∏–Ω–¥–µ–∫—Å–µ
        backgroundColor: '#ffff00',
        borderColor: '#ffff00',
        borderWidth: isMobile ? 4 : 3,
        pointRadius: isMobile ? 20 : 15, // –ë–æ–ª—å—à–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –¥–ª—è touch
        pointHoverRadius: isMobile ? 22 : 15,
        pointHitRadius: isMobile ? 50 : 40, // –ë–æ–ª—å—à–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
        pointBackgroundColor: '#ffff00',
        pointBorderColor: '#000000',
        pointBorderWidth: isMobile ? 4 : 3,
        pointHoverBackgroundColor: '#ffff00',
        pointHoverBorderColor: '#000000',
        pointHoverBorderWidth: isMobile ? 4 : 3,
        showLine: false,
        dragData: true,
        // –û—Ç–∫–ª—é—á–∞–µ–º tooltip –¥–ª—è —ç—Ç–æ–≥–æ dataset
        tooltip: {
          enabled: false
        }
      });

      // 3. –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤
      selectedRegimes.forEach(regime => {
        const data = revenueRange.map((revenue, index) => {
          try {
            const params = {
              regime: [regime],
              community,
              maritalStatus,
              children,
              annualRevenue: revenue,
              monthlyExpenses,
              companyAge: 1,
              beckhamYear: 1,
              plannedDividends: 0,
              stockOptions: 0
            };

            const result = calculateTaxRegime(regime, params);
            const netMonthly = Math.max(0, result.netMonthly);
            return {x: index, y: netMonthly};
          } catch (error) {
            console.error(`Error calculating ${regime} for revenue ${revenue}:`, error);
            return {x: index, y: 0};
          }
        });

        datasets.push({
          label: isMobile ? (REGIME_NAMES_MOBILE[regime] || regime) : (REGIME_NAMES[regime] || regime),
          data,
          borderColor: CHART_COLORS[regime] || '#00ffff',
          backgroundColor: (CHART_COLORS[regime] || '#00ffff') + '20',
          borderWidth: isMobile ? 4 : 3, // –¢–æ–ª—â–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          tension: 0.4,
          pointRadius: isMobile ? 6 : 4, // –ë–æ–ª—å—à–µ —Ç–æ—á–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          pointHoverRadius: isMobile ? 8 : 6,
          pointBackgroundColor: CHART_COLORS[regime] || '#00ffff',
          pointBorderColor: '#0a0a0f',
          pointBorderWidth: 2,
          pointHoverBackgroundColor: '#ffffff',
          pointHoverBorderColor: CHART_COLORS[regime] || '#00ffff',
          pointHoverBorderWidth: 3,
          fill: false
        });
      });

      const chartData = {
        datasets,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        _revenueRange: revenueRange,
        _currentIncomeIndex: actualIndex
      };

      return chartData;
    } catch (error) {
      console.error('Error generating chart data:', error);
      return {
        datasets: [],
        _revenueRange: [],
        _currentIncomeIndex: -1
      };
    }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
  const chartData = generateChartData();
  const currentIncomeIndex = chartData._currentIncomeIndex;

  const options: ChartOptions<'line'> = {
    responsive: true,
    maintainAspectRatio: false,
    interaction: {
      mode: 'point',
      intersect: true,
    },
    plugins: {
      dragData: {
        round: 0,
        showTooltip: false, // –û—Ç–∫–ª—é—á–∞–µ–º tooltip –ø—Ä–∏ drag
        dragX: true,
        dragY: false,
        onDragStart: (event: MouseEvent | TouchEvent, datasetIndex: number) => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (typeof window === 'undefined' || !isClient) return false;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º throttling –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º drag —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            lastDragTime.current = 0;
            setIsDragging(true);
            
            mobileLog(`üéÆ Drag started on dataset ${datasetIndex}`);
            
            // –†–∞–∑—Ä–µ—à–∞–µ–º drag —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–µ–π —Ç–æ—á–∫–∏ (datasetIndex = 1 –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º, 1 –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ)
            return datasetIndex === (isMobile ? 0 : 1);
          } catch (error) {
            console.error('DragStart error:', error);
            setIsDragging(false);
            
            mobileLog(`‚ùå DragStart error: ${error instanceof Error ? error.message : String(error)}`, 'error');
            return false;
          }
        },
        onDrag: (event: MouseEvent | TouchEvent, datasetIndex: number, index: number, value: number | {x: number, y: number} | null) => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (typeof window === 'undefined' || !isClient) return;
            
            // –ë–∞—Ç—á–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è browser flooding
            if (datasetIndex === (isMobile ? 0 : 1)) {
              // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–æ–≤
              const revenueRange = Array.from({ length: 55 }, (_, i) => 30000 + (i * 5000));
              
              // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ—á–∫–∏
              let newIncomeIndex: number;
              if (typeof value === 'object' && value !== null && 'x' in value) {
                newIncomeIndex = Math.round(Math.max(0, Math.min(revenueRange.length - 1, value.x)));
              } else {
                newIncomeIndex = Math.round(Math.max(0, Math.min(revenueRange.length - 1, index)));
              }
              const newRevenue = revenueRange[newIncomeIndex];
              const safeRevenue = Math.min(Math.max(newRevenue, 30000), 300000);
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
              lastRevenueUpdate.current = safeRevenue;
              
              // Throttled –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
              const now = Date.now();
              if (now - lastDragTime.current >= dragThrottleMs) {
                lastDragTime.current = now;
                
                // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π pending update
                if (pendingUpdate.current) {
                  cancelAnimationFrame(pendingUpdate.current);
                }
                
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π frame
                pendingUpdate.current = requestAnimationFrame(() => {
                  setAnnualRevenue(lastRevenueUpdate.current);
                  pendingUpdate.current = null;
                });
              }
            }
          } catch (error) {
            console.error('Drag error:', error);
            setIsDragging(false);
            
            mobileLog(`‚ùå Drag error: ${error instanceof Error ? error.message : String(error)}`, 'error');
          }
        },
        onDragEnd: (event: MouseEvent | TouchEvent, datasetIndex: number, index: number, value: number | {x: number, y: number} | null) => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (typeof window === 'undefined' || !isClient) return;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º drag —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setIsDragging(false);
            
            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending updates
            if (pendingUpdate.current) {
              cancelAnimationFrame(pendingUpdate.current);
              pendingUpdate.current = null;
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ—á–∫–∏
            if (datasetIndex === (isMobile ? 0 : 1)) {
              // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–æ–≤
              const revenueRange = Array.from({ length: 55 }, (_, i) => 30000 + (i * 5000));
              
              // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ—á–∫–∏
              let newIncomeIndex: number;
              if (typeof value === 'object' && value !== null && 'x' in value) {
                newIncomeIndex = Math.round(Math.max(0, Math.min(revenueRange.length - 1, value.x)));
              } else {
                newIncomeIndex = Math.round(Math.max(0, Math.min(revenueRange.length - 1, index)));
              }
              const newRevenue = revenueRange[newIncomeIndex];
              
              // –§–∏–Ω–∞–ª—å–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
              const safeRevenue = Math.min(Math.max(newRevenue, 30000), 300000);
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç drag —Å–æ–±—ã—Ç–∏—è
              setTimeout(() => {
                setAnnualRevenue(safeRevenue);
                console.log('Drag ended, final revenue:', safeRevenue);
                
                mobileLog(`üèÅ Drag ended. Final revenue: ‚Ç¨${safeRevenue}`);
              }, 0);
            }
          } catch (error) {
            console.error('DragEnd error:', error);
            setIsDragging(false);
            
            mobileLog(`‚ùå DragEnd error: ${error instanceof Error ? error.message : String(error)}`, 'error');
          }
        }
      },
      title: {
        display: false // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
      },
      legend: {
        position: isMobile ? 'bottom' : 'top', // –õ–µ–≥–µ–Ω–¥–∞ —Å–Ω–∏–∑—É –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
        labels: {
          color: '#ffffff',
          font: {
            family: 'monospace',
            size: isMobile ? 10 : 12 // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          },
          usePointStyle: true,
          pointStyle: 'circle',
          padding: isMobile ? 10 : 20, // –ú–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          boxWidth: isMobile ? 15 : 20, // –ú–µ–Ω—å—à–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          boxHeight: isMobile ? 15 : 20,
          filter: (legendItem) => {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ª–µ–≥–µ–Ω–¥—ã
            return legendItem.text !== '–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥' && legendItem.text !== '–í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥';
          }
        },
        // –ú–æ–±–∏–ª—å–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        ...(isMobile && {
          maxHeight: 80,
          fullSize: false
        })
      },
      tooltip: {
        enabled: false // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ tooltips
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω
      ...(currentIncomeIndex >= 0 && {
        annotation: {
          annotations: {
            currentIncome: {
              type: 'line',
              xMin: currentIncomeIndex,
              xMax: currentIncomeIndex,
              borderColor: '#ffff00',
              borderWidth: isMobile ? 3 : 2, // –¢–æ–ª—â–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
              borderDash: [10, 5],
              label: {
                display: false // –£–±–∏—Ä–∞–µ–º –Ω–∞–¥–ø–∏—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏—é
              }
            }
          }
        }
      })
    },
    scales: {
      x: {
        type: 'linear', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ linear –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ dragX
        display: true,
        min: 0,
        max: 54, // 55 —Ç–æ—á–µ–∫ (0-54)
        title: {
          display: !isMobile, // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
          text: '–í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ –≤ –≥–æ–¥',
          color: '#00ffff',
          font: {
            family: 'monospace',
            size: 14,
            weight: 'bold'
          }
        },
        grid: {
          color: 'rgba(0, 255, 255, 0.1)',
          drawOnChartArea: true
        },
        ticks: {
          color: '#a0a0a0',
          font: {
            family: 'monospace',
            size: isMobile ? 9 : 11 // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          },
          stepSize: isMobile ? 4 : 2, // –†–µ–∂–µ —Ç–∏–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          maxTicksLimit: isMobile ? 8 : 12, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤
          callback: function(value) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ label –¥–æ—Ö–æ–¥–∞
            const revenue = 30000 + (Number(value) * 5000);
            return isMobile ? `${revenue / 1000}k` : `${revenue / 1000}k‚Ç¨`;
          }
        }
      },
      y: {
        display: true,
        title: {
          display: !isMobile, // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          text: '–î–æ—Ö–æ–¥ –Ω–∞ —Ä—É–∫–∏ (–º–µ—Å—è—Ü)',
          color: '#00ffff',
          font: {
            family: 'monospace',
            size: 14,
            weight: 'bold'
          }
        },
        grid: {
          color: 'rgba(0, 255, 255, 0.1)',
          drawOnChartArea: true
        },
        ticks: {
          color: '#a0a0a0',
          font: {
            family: 'monospace',
            size: isMobile ? 9 : 11 // –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          },
          maxTicksLimit: isMobile ? 6 : 8, // –ú–µ–Ω—å—à–µ —Ç–∏–∫–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
          callback: function(value) {
            const num = Math.round(Number(value));
            return isMobile ? `‚Ç¨${num > 1000 ? (num/1000).toFixed(1) + 'k' : num}` : '‚Ç¨' + num.toLocaleString();
          }
        },
        beginAtZero: true
      }
    },
    elements: {
      line: {
        borderJoinStyle: 'round',
        borderCapStyle: 'round'
      }
    }
  };

  // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º Chart.js –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  if (!isClient) {
    return (
      <div className="cyber-chart flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4 animate-pulse">üìä</div>
          <h3 className={`${isMobile ? 'text-lg' : 'text-xl'} font-cyber cyber-text-glow mb-2`}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞...
          </h3>
        </div>
      </div>
    );
  }

  if (selectedRegimes.length === 0) {
    return (
      <div className="cyber-chart flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4 animate-pulse">üìä</div>
          <h3 className={`${isMobile ? 'text-lg' : 'text-xl'} font-cyber cyber-text-glow mb-2`}>
            –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          </h3>
          <p className={`text-cyber-text-secondary ${isMobile ? 'text-sm' : ''}`}>
            {isMobile ? '–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ä–µ–∂–∏–º—ã' : '–û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ —Ä–µ–∂–∏–º—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏'}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="cyber-chart">
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –¥–æ—Ö–æ–¥–µ */}
      {isMobile && (
        <div className="mb-4 p-3 bg-cyber-darker/50 rounded border border-cyber-yellow/30">
          <div className="flex items-center justify-between text-sm">
            <span className="text-cyber-text-muted">–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥:</span>
            <span className="text-cyber-yellow font-cyber">
              ‚Ç¨{annualRevenue.toLocaleString()}/–≥–æ–¥
            </span>
          </div>
          <div className="text-xs text-cyber-text-muted mt-1">
            üí° –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∂–µ–ª—Ç—É—é —Ç–æ—á–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </div>
        </div>
      )}
      
      <div className={`${isMobile ? 'h-[300px]' : 'h-[500px]'} w-full`}>
        {isClient && typeof window !== 'undefined' && (
          <Line key={chartKey} data={chartData} options={options} />
        )}
      </div>
      
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞ –æ—Å–µ–π */}
      {isMobile && (
        <div className="mt-3 grid grid-cols-2 gap-3 text-xs text-cyber-text-muted">
          <div className="text-center">
            <span className="text-cyber-cyan">‚Üî</span> –í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ –≤ –≥–æ–¥
          </div>
          <div className="text-center">
            <span className="text-cyber-cyan">‚Üï</span> –î–æ—Ö–æ–¥ –Ω–∞ —Ä—É–∫–∏ (–º–µ—Å—è—Ü)
          </div>
        </div>
      )}
    </div>
  );
} 