'use client';

import { useCalculatorStore } from '@/store/calculator-store';
import { REGIME_NAMES, COMMUNITY_NAMES } from '@/lib/constants/tax-constants';
import { TaxRegime, AutonomousCommunity, MaritalStatus } from '@/types/tax';

interface SidebarProps {
  isMobileMenuOpen?: boolean;
  onMobileClose?: () => void;
}

export function Sidebar({ isMobileMenuOpen = false, onMobileClose }: SidebarProps) {
  const {
    community,
    maritalStatus,
    children,
    monthlyExpenses,
    selectedRegimes,
    setCommunity,
    setMaritalStatus,
    setChildren,
    setMonthlyExpenses,
    toggleRegime,
    reset
  } = useCalculatorStore();

  const handleMobileSelect = () => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    if (onMobileClose && window.innerWidth < 1024) {
      setTimeout(() => onMobileClose(), 300);
    }
  };

  return (
    <aside className={`cyber-sidebar cyber-scrollbar ${isMobileMenuOpen ? 'mobile-open' : ''}`}>
      <div className="px-4 lg:px-8 py-6 space-y-6">
        {/* –ú–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <div className="lg:hidden flex items-center justify-between mb-6">
          <h2 className="text-lg font-cyber cyber-text-glow">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </h2>
          <button
            onClick={onMobileClose}
            className="cyber-button-mobile p-2 text-cyber-cyan"
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
          >
            ‚úï
          </button>
        </div>

        {/* –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center hidden lg:block">
          <h2 className="text-xl font-cyber cyber-text-glow mb-2">
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
          </h2>
          <div className="w-full h-px" style={{background: 'linear-gradient(90deg, #00ffff, #ff007a, #00ffb3)'}}></div>
        </div>

        {/* –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ */}
        <div className="space-y-4">
          <h3 className="text-base lg:text-lg font-cyber text-cyber-cyan flex items-center">
            üìç –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
          </h3>
          <div className="space-y-2 lg:space-y-3">
            {(Object.keys(COMMUNITY_NAMES) as AutonomousCommunity[]).map((com) => (
              <label 
                key={com} 
                className="flex items-center space-x-3 cursor-pointer cyber-border-animated px-3 lg:px-4 py-3 lg:py-4 rounded-md"
                onClick={handleMobileSelect}
              >
                <input
                  type="radio"
                  name="community"
                  value={com}
                  checked={community === com}
                  onChange={(e) => setCommunity(e.target.value as AutonomousCommunity)}
                  className="cyber-radio"
                />
                <div className="flex-1">
                  <span className="text-cyber-text font-cyber text-sm lg:text-base">
                    {COMMUNITY_NAMES[com]}
                  </span>
                  <div className="text-xs text-cyber-text-muted mt-1 lg:hidden">
                    {com === 'madrid' && 'üü¢ –ù–∏–∑–∫–∏–µ –Ω–∞–ª–æ–≥–∏'}
                    {com === 'catalunya' && 'üî¥ –í—ã—Å–æ–∫–∏–µ –Ω–∞–ª–æ–≥–∏'}
                    {com === 'valencia' && 'üü° –°—Ä–µ–¥–Ω–∏–µ –Ω–∞–ª–æ–≥–∏'}
                  </div>
                </div>
                <span className="text-xs text-cyber-text-muted hidden lg:block">
                  {com === 'madrid' && 'üü¢ –ù–∏–∑–∫–∏–µ –Ω–∞–ª–æ–≥–∏'}
                  {com === 'catalunya' && 'üî¥ –í—ã—Å–æ–∫–∏–µ –Ω–∞–ª–æ–≥–∏'}
                  {com === 'valencia' && 'üü° –°—Ä–µ–¥–Ω–∏–µ –Ω–∞–ª–æ–≥–∏'}
                </span>
              </label>
            ))}
          </div>
        </div>

        {/* –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
        <div className="space-y-4">
          <h3 className="text-base lg:text-lg font-cyber text-cyber-cyan flex items-center">
            üë§ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
          </h3>
          <div className="space-y-2 lg:space-y-3">
            {[
              { value: 'soltero', label: '–û–¥–∏–Ω–æ–∫–∏–π/–∞—è' },
              { value: 'casado', label: '–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º' },
              { value: 'con_hijos', label: '–° –¥–µ—Ç—å–º–∏' }
            ].map((status) => (
              <label 
                key={status.value} 
                className="flex items-center space-x-3 cursor-pointer cyber-border-animated px-3 lg:px-4 py-3 lg:py-4 rounded-md"
                onClick={handleMobileSelect}
              >
                <input
                  type="radio"
                  name="maritalStatus"
                  value={status.value}
                  checked={maritalStatus === status.value}
                  onChange={(e) => setMaritalStatus(e.target.value as MaritalStatus)}
                  className="cyber-radio"
                />
                <span className="text-cyber-text font-cyber text-sm lg:text-base">
                  {status.label}
                </span>
              </label>
            ))}
          </div>
          
          {maritalStatus === 'con_hijos' && (
            <div className="mt-4 p-4 bg-cyber-darker/30 rounded border border-cyber-cyan/20">
              <label className="block text-sm text-cyber-text-secondary mb-2">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:
              </label>
              <input
                type="number"
                min="0"
                max="10"
                value={children}
                onChange={(e) => setChildren(parseInt(e.target.value) || 0)}
                className="cyber-input w-full"
                placeholder="0"
              />
            </div>
          )}
        </div>



        {/* –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã */}
        <div className="space-y-4">
          <h3 className="text-base lg:text-lg font-cyber text-cyber-cyan flex items-center">
            üí≥ –†–∞—Å—Ö–æ–¥—ã (–º–µ—Å.)
          </h3>
          
          {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è */}
          <div className="lg:hidden space-y-3">
            <div className="flex items-center space-x-3">
              <input
                type="number"
                min="0"
                max="10000"
                value={monthlyExpenses}
                onChange={(e) => setMonthlyExpenses(parseInt(e.target.value) || 0)}
                className="cyber-input flex-1"
                placeholder="1000"
              />
              <span className="text-cyber-cyan font-cyber text-sm whitespace-nowrap">
                ‚Ç¨/–º–µ—Å
              </span>
            </div>
            <input
              type="range"
              min="0"
              max="5000"
              step="100"
              value={monthlyExpenses}
              onChange={(e) => setMonthlyExpenses(parseInt(e.target.value))}
              className="cyber-slider w-full"
            />
            <div className="flex justify-between text-xs text-cyber-text-muted">
              <span>0‚Ç¨</span>
              <span className="text-cyber-cyan font-cyber">
                {monthlyExpenses}‚Ç¨
              </span>
              <span>5000‚Ç¨</span>
            </div>
          </div>

          {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="hidden lg:block space-y-3">
            <input
              type="range"
              min="0"
              max="5000"
              step="100"
              value={monthlyExpenses}
              onChange={(e) => setMonthlyExpenses(parseInt(e.target.value))}
              className="cyber-slider"
            />
            <div className="flex justify-between text-xs text-cyber-text-muted">
              <span>0‚Ç¨</span>
              <span className="text-cyber-cyan font-cyber">
                {monthlyExpenses}‚Ç¨/–º–µ—Å
              </span>
              <span>5000‚Ç¨</span>
            </div>
            <input
              type="number"
              min="0"
              max="10000"
              value={monthlyExpenses}
              onChange={(e) => setMonthlyExpenses(parseInt(e.target.value) || 0)}
              className="cyber-input"
              placeholder="1000"
            />
          </div>
        </div>

        {/* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–æ–≤ */}
        <div className="space-y-4">
          <h3 className="text-base lg:text-lg font-cyber text-cyber-cyan flex items-center">
            üéØ –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∂–∏–º—ã
          </h3>
          
          {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - grid layout */}
          <div className="lg:hidden grid grid-cols-1 gap-2">
            {(Object.keys(REGIME_NAMES) as TaxRegime[]).map((regime) => (
              <label 
                key={regime} 
                className="flex items-center space-x-3 cursor-pointer cyber-border-animated px-3 py-3 rounded-md"
                onClick={handleMobileSelect}
              >
                <input
                  type="checkbox"
                  checked={selectedRegimes.includes(regime)}
                  onChange={() => toggleRegime(regime)}
                  className="cyber-checkbox"
                />
                <span className="text-cyber-text font-cyber text-sm flex-1">
                  {REGIME_NAMES[regime]}
                </span>
              </label>
            ))}
          </div>

          {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="hidden lg:block space-y-3">
            {(Object.keys(REGIME_NAMES) as TaxRegime[]).map((regime) => (
              <label key={regime} className="flex items-center space-x-3 cursor-pointer cyber-border-animated px-4 py-3">
                <input
                  type="checkbox"
                  checked={selectedRegimes.includes(regime)}
                  onChange={() => toggleRegime(regime)}
                  className="cyber-checkbox"
                />
                <span className="text-cyber-text font-cyber text-sm">
                  {REGIME_NAMES[regime]}
                </span>
              </label>
            ))}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="space-y-3 pt-4">
          <button
            onClick={reset}
            className="cyber-button w-full text-sm"
          >
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          </button>
          
          {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
          <button
            onClick={onMobileClose}
            className="lg:hidden cyber-button w-full text-sm bg-cyber-green/10 border-cyber-green text-cyber-green hover:bg-cyber-green hover:text-cyber-dark"
          >
            ‚úì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </button>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="text-xs text-cyber-text-muted space-y-2 pt-4 border-t border-cyber-cyan/20">
          <p className="hidden lg:block">üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä—ã –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</p>
          <p className="hidden lg:block">üîó URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</p>
          <p className="lg:hidden">üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
          <p>üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
        </div>
      </div>
    </aside>
  );
} 